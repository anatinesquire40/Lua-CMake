cmake_minimum_required(VERSION 3.18)
if(NOT WIN32)
message(FATAL_ERROR "WLua only support Windows")
endif()
set(EXE_NAME "wlua54")
project(WLua)
set(LIB_SRC_PATH ${PROJECT_SOURCE_DIR}/..)
include_directories(${LIB_SRC_PATH} )
if(NOT BUILD_LUA_ALL)
add_subdirectory(${LIB_SRC_PATH}/library LIBLUA)
endif()
if(NOT LUA_GENERATOR_PLATFORM)
set(LUA_GENERATOR_PLATFORM ${CMAKE_GENERATOR_PLATFORM})
endif()
set(LUA_OUTPUT_DIR ${LIB_SRC_PATH}/../bin/${CMAKE_SYSTEM_NAME}/${LUA_GENERATOR_PLATFORM})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${LUA_OUTPUT_DIR}")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${LUA_OUTPUT_DIR}")
file(GLOB ALL_RESOURCE_FILES ../lua.ico ../lua.rc)
message(STATUS "ALL_RESOURCE_FILES: ${ALL_RESOURCE_FILES}")
source_group("Resource" FILES ${ALL_RESOURCE_FILES})
file(GLOB_RECURSE HEADER_FILES ../*.h ../*.hpp ../*.inl)
set(SOURCE_FILES ../lua.c ../wmain.c)
set(ALL_FILES ${HEADER_FILES} ${SOURCE_FILES})
add_executable(${EXE_NAME} ${HEADER_FILES} ${SOURCE_FILES} ${ALL_RESOURCE_FILES})
target_include_directories(${EXE_NAME} PUBLIC ${LIB_INCLUDE_PATH})
if(NOT BUILD_LUA_ALL)
target_link_libraries(${EXE_NAME} PUBLIC llua54)
endif()
set_target_properties(${EXE_NAME} PROPERTIES
    LINK_FLAGS "/SUBSYSTEM:WINDOWS"
)